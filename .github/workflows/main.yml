name: Let's Code & Deploy

on:
  push:
    branches:
      - main

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set_image.outputs.image_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Image Name
        id: set_image
        run: echo "image_name=${{ secrets.DOCKER_HUB_USERNAME }}/amanops:latest" >> $GITHUB_OUTPUT

docker:
  name: Build & Push Docker Image
  runs-on: ubuntu-latest
  needs: checkout
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ needs.checkout.outputs.image_name }}
        platforms: linux/amd64


  scan:
    name: Scan Image with Trivy
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Scan Docker Image
        run: |
          IMAGE_NAME=${{ needs.checkout.outputs.image_name }}
          trivy image $IMAGE_NAME | tee trivy-report.log

  whitelist:
    name: Whitelist GitHub Actions IP
    runs-on: ubuntu-latest
    needs: scan
    outputs:
      runner_ip: ${{ steps.get_ip.outputs.runner_ip }}
    steps:
      - name: Whitelist IP in AWS Security Group
        id: get_ip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
        run: |
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
          echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32 \
            --region $AWS_REGION

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: whitelist
    steps:
      - name: SSH and Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ubuntu
          IMAGE_NAME: ${{ needs.checkout.outputs.image_name }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            set -e
            echo 'Stopping existing container...'
            sudo docker stop my-app || true

            echo 'Pruning system...'
            sudo docker system prune -af

            echo 'Pulling new image: '"$IMAGE_NAME"
            sudo docker pull $IMAGE_NAME

            echo 'Starting new container...'
            sudo docker run -d --restart=always --name my-app -p 8080:80 $IMAGE_NAME
          EOF

          rm -f private_key.pem

  revoke:
    name: Revoke GitHub Actions Public IP
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy, whitelist]
    steps:
      - name: Remove Runner IP from Security Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          RUNNER_IP: ${{ needs.whitelist.outputs.runner_ip }}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 22 \
            --cidr $RUNNER_IP/32 \
            --region $AWS_REGION
